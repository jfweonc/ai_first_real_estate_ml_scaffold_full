Please produce a Context Digest and a step-by-step execution plan (no code yet) for Steps 1–3.

Context pins:
- brief: project_brief@v1
- schema: mls_schema@v3
- guardrails: guardrails@v2
- python: 3.11, style: ruff

Phase manifest: phases/phase_current_manifest.yaml

Current diff (truncated):
diff --git a/.vscode/tasks.json b/.vscode/tasks.json
index 08d2602..adeea9e 100644
--- a/.vscode/tasks.json
+++ b/.vscode/tasks.json
@@ -2,75 +2,33 @@
   "version": "2.0.0",
   "tasks": [
     {
-      "label": "Agent: Manager \u2014 Start RFC",
+      "label": "AI: Apply Patch",
       "type": "shell",
-      "command": "python tools/agent_runner.py --role manager --goal '<<type your goal>>' --files context/phase_plan.md context/file_map.md .agents/guardrails.md --engine gpt5 --emit rfc"
-    },
-    {
-      "label": "Agent: Architect \u2014 Propose for RFC",
-      "type": "shell",
-      "command": "python tools/agent_runner.py --role architect --for-rfc <<RFC-ID>> --files context/phase_plan.md .agents/guardrails.md --engine gpt5"
-    },
-    {
-      "label": "Agent: Test \u2014 Critique Proposal",
-      "type": "shell",
-      "command": "python tools/agent_runner.py --role test --for-proposal <<PROP-ID>> --files .agents/guardrails.md --engine codex"
-    },
-    {
-      "label": "Agent: Manager \u2014 Decide",
-      "type": "shell",
-      "command": "python tools/agent_runner.py --role manager --decide <<RFC-ID>> --engine gpt5"
-    },
-    {
-      "label": "Apply Patch",
-      "type": "shell",
-      "command": "python tools/apply_patch.py --diff path/to/diff.patch"
-    },
-    {
-      "label": "Capability Review Report",
-      "type": "shell",
-      "command": "python tools/capability_review.py --since 2025-09-01 --out reports/capability_review.md"
-    },
-    {
-      "label": "Agent: Test \u2014 Generate Phase 0.5 Tests",
-      "type": "shell",
-      "command": "python tools/agent_runner.py --role test --goal \"Write failing tests for Phase 0.5 CSV ingest + coverage report\" --files context/phase_plan.md .agents/guardrails.md --engine codex"
-    },
-    {
-      "label": "Pytest (quick)",
-      "type": "shell",
-      "command": "pytest -q"
-    },
-    {
-      "label": "Orchestrator: init backlog",
-      "type": "shell",
-      "command": "python tools/conductor.py init-backlog"
-    },
-    {
-      "label": "Orchestrator: run next story",
-      "type": "shell",
-      "command": "python tools/conductor.py next"
+      "command": "python -m orchestrator.cli apply patches/0001.diff",
+      "problemMatcher": []
     },
     {
-      "label": "Orchestrator: run story (prompt for id)",
+      "label": "AI: Test (quick)",
       "type": "shell",
-      "command": "python tools/conductor.py run --id P05-CLI"
+      "command": "python -m orchestrator.cli test",
+      "problemMatcher": []
     },
     {
-      "label": "ETL: import-csv (dry-run)",
+      "label": "AI: Status",
       "type": "shell",
-      "command": "python -m src.relml.cli import-csv --root data/raw --dry-run"
+      "command": "python -m orchestrator.cli status",
+      "problemMatcher": []
     },
     {
-      "label": "ETL: index-images (dry-run)",
+      "label": "AI: Build planning request (copy)",
       "type": "shell",
-      "command": "python -m src.relml.cli index-images --root data/raw --dry-run",
+      "command": "python -m orchestrator.cli make-request",
       "problemMatcher": []
     },
     {
-      "label": "ETL: geocode (dry-run)",
+      "label": "AI: (opt) Call GPT-5 API",
       "type": "shell",
-      "command": "python -m src.relml.cli geocode --input data/processed/listings.parquet --dry-run",
+      "command": "python -m orchestrator.cli call-gpt5",
       "problemMatcher": []
     }
   ]
diff --git a/README.md b/README.md
index 2da4de0..e96b4f2 100644
--- a/README.md
+++ b/README.md
@@ -63,3 +63,12 @@ Temporary (YELLOW) auto-extensions are logged in `bus/capabilities.jsonl`. Revie
 ```bash
 python tools/capability_review.py --since 2025-09-01 --out reports/capability_review.md
 ```
+## Orchestrator Workflow
+
+See `docs/OrchestratorWorkflow.md` for a lightweight loop to:
+- emit current state,
+- request planning guidance from GPT-5 (copy/paste or optional API call),
+- apply guarded patches,
+- run focused tests, and
+- write status + handoff artifacts.
+
diff --git a/docs/orchestration_contract.md b/docs/orchestration_contract.md
index 63d27f7..a58f72b 100644
--- a/docs/orchestration_contract.md
+++ b/docs/orchestration_contract.md
@@ -2,9 +2,9 @@
 Date: 2025-09-30
 
 Roles & Models
-- Manager/Conductor -> gpt-5-thinking
-- Specialist (Backend/Test) -> codex-latest
-- Reviewer (Lint/Style) -> codex-latest
+- Manager/Conductor -> gpt-4o
+- Specialist (Backend/Test) -> gpt-4o-mini
+- Reviewer (Lint/Style) -> gpt-4o-mini
 
 Execution Default
 - Docker-first (compose services), fall back to host for quick lint/unit loops when needed.
diff --git a/policy/orchestrator.yaml b/policy/orchestrator.yaml
index 20b3850..77f2b3a 100644
--- a/policy/orchestrator.yaml
+++ b/policy/orchestrator.yaml
@@ -19,15 +19,15 @@ manager_escalate:
   pii_touch: true
 
 role_to_model:
-  manager: gpt-5-thinking
-  pm: gpt-5-thinking
-  architect: gpt-5-thinking
-  security: gpt-5-thinking
-  sre: gpt-5-thinking
-  data_ml: gpt-5-thinking
-  backend: codex-latest
-  frontend: codex-latest
-  test: codex-latest
+  manager: gpt-4o
+  pm: gpt-4o
+  architect: gpt-4o
+  security: gpt-4o
+  sre: gpt-4o
+  data_ml: gpt-4o
+  backend: gpt-4o-mini
+  frontend: gpt-4o-mini
+  test: gpt-4o-mini
 
 lanes:
   build: ["test", "backend", "test"]
diff --git a/tools/conductor.py b/tools/conductor.py
index c405d41..d72b45d 100644
--- a/tools/conductor.py
+++ b/tools/conductor.py
@@ -69,12 +69,13 @@ def post_openai(model: str, prompt_text: str, max_output_tokens: int = 4000) ->
     url = "https://api.openai.com/v1/responses"
     payload = {
         "model": model,
-        "input": [{"role": "user", "content": [{"type": "text", "text": prompt_text}]}],
+        "input": [{"role": "user", "content": [{"type": "input_text", "text": prompt_text}]}],
         "max_output_tokens": max_output_tokens,
     }
     headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
     response = requests.post(url, headers=headers, json=payload, timeout=300)
-    response.raise_for_status()
+    if not response.ok:
+        raise RuntimeError(f'OpenAI API error {response.status_code}: {response.text}')
     data = response.json()
     if not isinstance(data, dict):
         raise ValueError("Unexpected OpenAI response payload")

Latest quick test result (truncated):
Quick syntax scan: 9/9 OK

Return:
1) Context Digest (files + versions you read; key assumptions)
2) Plan with `targets` (file list) and `acceptance` (pytest node IDs) for Steps 3b–6 next cycle
3) Risks/edge cases + rollback notes
(No patches yet.)
